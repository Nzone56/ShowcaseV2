<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Showcase Template</title><link>https://nzone56.github.io/showcase/</link><description>Recent content in Introduction on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://nzone56.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_1/illusions/coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_1/illusions/coloring/</guid><description>Illusions - Color Mixing # Explicación # El color es la impresión producida por un tono de luz en los órganos visuales, se trata de un fenómeno físico-químico donde cada color depende de la longitud de onda. En la siguiente animación podemos ver la mezcla aditiva de colores, en la parte izquierda, y la mezcla substractiva de colores en la parte derecha.
Intuitivamente podemos realizar la mezcla de los colores mediante la cantidad de luz perteneciente al espectro R(red), G(green), B(blue), produciendo todas las posible gamas y tonos, pero adicionalmente podemos sustraer colores aplicando un filtro, que se gradua mediante transparencia y que puede ser de color cyan que permite solo el paso de la luz verde y azul, el filtro magenta permite solo el paso de la luz roja y azul, y por último el filtro amarillo, que permite el paso de la luz roja y verde únicamente.</description></item><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_1/illusions/lilac_chaser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_1/illusions/lilac_chaser/</guid><description>Illusions - Lilac chaser # Consiste en unos discos de color borrosos alrededor de un punto central, donde en cada frame uno de estos discos desaparece y aparece luego el siguiente hace lo mismo en sentido de las agujas del reloj.
CODE const CANVAS_SIZE = 500; const DISTANCE = 200; function setup() { createCanvas(CANVAS_SIZE, CANVAS_SIZE); frameRate(10); colorPicker = createColorPicker(&amp;#34;#ee00ee&amp;#34;); colorPicker.position(10, height - 25); circleCountSlider = createSlider(12, 20, 12); circleCountSlider.position(width - 100, height - 20); circleCountSlider.</description></item><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_1/illusions/moire/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_1/illusions/moire/</guid><description>Illusions - Moiré # Explicación # Patrones de interferencia que pueden producirse cuando se superpone un patrón reglado opaco con huecos transparentes sobre otro patrón similar. CODE let xspeed = 2.3; let yspeed = 2.8; let xdirection = 1; let ydirection = 1; function setup() { createCanvas(700, 700); x1 = width/2; y1 = height/2; n = width/10; d = 50; x2 = width/2; y2 = height/2; } function moire(x,y,d,n){ for( i = 0;i&amp;lt;n;i++){ circle(x, y, d*i); strokeWeight(10); noFill(); } } function txt(){ textFont(&amp;#39;Georgia&amp;#39;); textSize(150); var w = textWidth(&amp;#34;MOIRÉ&amp;#34;); fill(0); fill(255); text(&amp;#34;MOIRÉ&amp;#34;, width/7.</description></item><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_1/illusions/stepping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_1/illusions/stepping/</guid><description> Illusions - Stepping # Explicación # Las diferencias de contraste entre el amarillo y el blanco y el negro y el azul permiten que se genere la ilusión optica en la que los bloques van dando pasos. Este efecto se ve reforzado cuando el experimento se hace a blanco y negro.
Oprima el mouse para quitar el fondo.
Oprima una tecla para pasar a blanco y negro. CODE function setup() { createCanvas(800, 400); frameRate(45) posX=0 colorA=color(255,255,0) colorB=color(25,25,112) bars=true blackWhite=false } function draw() { background(255); if(bars){ for (i =0;i&amp;lt;800;i=i+40){ fill(color(0)) rect(i, 0, 20, 400); } } noStroke() fill(colorA) rect(posX,140,120,40) fill(colorB) rect(posX,260,120,40) posX=posX+1 if(posX==680){ posX=0 } } function mousePressed() { if(bars==true){ bars=false }else{ bars=true } } function keyPressed(){ if(blackWhite==false){ colorA=color(255) colorB=color(0) blackWhite=true }else{ colorA=color(255,255,0) colorB=color(25,25,112) blackWhite=false } }</description></item><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_1/masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_1/masking/</guid><description>Workshop - Masking # Kernel # In image processing, a kernel, convolution matrix, or mask is a small matrix used for blurring, sharpening, embossing, edge detection, and more. This is accomplished by doing a convolution between the kernel and an image.
Convolution # Convolution is the process of adding each element of the image to its local neighbors, weighted by the kernel. This is related to a form of mathematical convolution.</description></item><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_1/terrain_visualization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_1/terrain_visualization/</guid><description> Terrain Visualization #</description></item><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_2/Bresenhams-line-algorithm-rasterization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_2/Bresenhams-line-algorithm-rasterization/</guid><description>Bresenham&amp;rsquo;s line algorithm (rasterization) # Bresenham&amp;rsquo;s line algorithm is a line drawing algorithm that determines the points of an n-dimensional raster that should be selected in order to form a close approximation to a straight line between two points. It is commonly used to draw line primitives in a bitmap image (e.g. on a computer screen), as it uses only integer addition, subtraction and bit shifting, all of which are very cheap operations in commonly used computer instruction sets such as x86_64.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Showcase Template</title><link>https://nzone56.github.io/showcase/docs/workshop_2/</link><description>Recent content on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://nzone56.github.io/showcase/docs/workshop_2/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_2/Bresenhams-line-algorithm-rasterization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_2/Bresenhams-line-algorithm-rasterization/</guid><description>Bresenham&amp;rsquo;s line algorithm (rasterization) # Bresenham&amp;rsquo;s line algorithm is a line drawing algorithm that determines the points of an n-dimensional raster that should be selected in order to form a close approximation to a straight line between two points. It is commonly used to draw line primitives in a bitmap image (e.g. on a computer screen), as it uses only integer addition, subtraction and bit shifting, all of which are very cheap operations in commonly used computer instruction sets such as x86_64.</description></item><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_2/rubik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_2/rubik/</guid><description>Rubik&amp;rsquo;s cube # Introduction # The Rubik&amp;rsquo;s cube is a 3x3x3 cube with 6 faces. Each face has 9 stickers, each sticker has a color. The cube can be rotated in 3 dimensions. The goal is to rotate the cube so that each face has the same color.
CODE const WIDTH = 500, HEIGHT = 500; const SIZE = WIDTH / 15; const MOVES = [ &amp;#34;U&amp;#34;, &amp;#34;U&amp;#39;&amp;#34;, &amp;#34;U2&amp;#34;, &amp;#34;D&amp;#34;, &amp;#34;D&amp;#39;&amp;#34;, &amp;#34;D2&amp;#34;, &amp;#34;R&amp;#34;, &amp;#34;R&amp;#39;&amp;#34;, &amp;#34;R2&amp;#34;, &amp;#34;L&amp;#34;, &amp;#34;L&amp;#39;&amp;#34;, &amp;#34;L2&amp;#34;, &amp;#34;F&amp;#34;, &amp;#34;F&amp;#39;&amp;#34;, &amp;#34;F2&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;B&amp;#39;&amp;#34;, &amp;#34;B2&amp;#34;, ]; const COLOR_MAP = { 1: [255], 2: [255, 255, 0], 3: [255, 0, 0], 4: [255, 128, 0], 5: [0, 255, 0], 6: [0, 0, 255], }; const KEY_MAP = { U: () =&amp;gt; turnFace(up, 0), &amp;#34;U&amp;#39;&amp;#34;: () =&amp;gt; { turnFace(up, 0); turnFace(up, 0); turnFace(up, 0); }, U2: () =&amp;gt; { turnFace(up, 0); turnFace(up, 0); }, D: () =&amp;gt; turnFace(down, 1), &amp;#34;D&amp;#39;&amp;#34;: () =&amp;gt; { turnFace(down, 1); turnFace(down, 1); turnFace(down, 1); }, D2: () =&amp;gt; { turnFace(down, 1); turnFace(down, 1); }, R: () =&amp;gt; turnFace(right, 2), &amp;#34;R&amp;#39;&amp;#34;: () =&amp;gt; { turnFace(right, 2); turnFace(right, 2); turnFace(right, 2); }, R2: () =&amp;gt; { turnFace(right, 2); turnFace(right, 2); }, L: () =&amp;gt; turnFace(left, 3), &amp;#34;L&amp;#39;&amp;#34;: () =&amp;gt; { turnFace(left, 3); turnFace(left, 3); turnFace(left, 3); }, L2: () =&amp;gt; { turnFace(left, 3); turnFace(left, 3); }, F: () =&amp;gt; turnFace(front, 4), &amp;#34;F&amp;#39;&amp;#34;: () =&amp;gt; { turnFace(front, 4); turnFace(front, 4); turnFace(front, 4); }, F2: () =&amp;gt; { turnFace(front, 4); turnFace(front, 4); }, B: () =&amp;gt; turnFace(back, 5), &amp;#34;B&amp;#39;&amp;#34;: () =&amp;gt; { turnFace(back, 5); turnFace(back, 5); turnFace(back, 5); }, B2: () =&amp;gt; { turnFace(back, 5); turnFace(back, 5); }, }; let up, down, right, left, front, back; let easycam; // eslint-disable-next-line no-unused-vars function setup() { createCanvas(WIDTH, HEIGHT, WEBGL); setAttributes(&amp;#34;antialias&amp;#34;, true); initPos(); easycam = createEasyCam(); easycam.</description></item><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_2/skeleton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_2/skeleton/</guid><description>Visualization of an skeleton render # Allows the visualization of a 3d model of a skeleton with its individual parts as separate .obj files.
Possible applications:
Medical image analysis Position animation Anatomical atlas Modelo original obtenido de: https://sketchfab.com/3d-models/low-poly-skeleton-4866bd05df2d4febba463295cd24b564</description></item></channel></rss>
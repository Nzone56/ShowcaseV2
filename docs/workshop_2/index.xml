<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Showcase Template</title><link>https://nzone56.github.io/showcase/docs/workshop_2/</link><description>Recent content on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://nzone56.github.io/showcase/docs/workshop_2/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_2/Bresenhams-line-algorithm-rasterization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_2/Bresenhams-line-algorithm-rasterization/</guid><description>Bresenham&amp;rsquo;s line algorithm (rasterization) # Bresenham&amp;rsquo;s line algorithm is a line drawing algorithm that determines the points of an n-dimensional raster that should be selected in order to form a close approximation to a straight line between two points. It is commonly used to draw line primitives in a bitmap image (e.g. on a computer screen), as it uses only integer addition, subtraction and bit shifting, all of which are very cheap operations in commonly used computer instruction sets such as x86_64.</description></item><item><title/><link>https://nzone56.github.io/showcase/docs/workshop_2/rubik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nzone56.github.io/showcase/docs/workshop_2/rubik/</guid><description> Rubik cube #</description></item></channel></rss>